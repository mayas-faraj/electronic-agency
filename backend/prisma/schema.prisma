// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// name, phone 100
// sn, email, password 50
// link 400
// address, note, comment 500
// description  1500

model Client {
  id          Int                     @id @default(autoincrement())
  user        String                  @unique @db.VarChar(100)
  phone       String                  @unique @db.VarChar(100)
  email       String?                 @unique @db.VarChar(50)
  avatar      String?                 @db.VarChar(400)
  namePrefix  String                  @default("Mr.") @map("name_prefix") @db.Char(3)
  firstName   String                  @map("first_name") @db.VarChar(100)
  lastName    String?                 @map("last_name") @db.VarChar(100)
  birthDate   DateTime?               @map("birth_date")
  isMale      Boolean                 @default(true) @map("is_male") @db.TinyInt
  isDisabled  Boolean                 @default(false) @map("is_disabled") @db.TinyInt
  isVerified  Boolean                 @default(false) @map("is_verified") @db.TinyInt
  createdAt   DateTime                @default(now()) @map("created_at")
  updatedAt   DateTime?               @updatedAt @map("updated_at")
  lastLoginAt DateTime?               @map("last_login_at")
  orders      Order[]
  reviews     ProductReview[]
  products    ProductItemsOnClients[]
  code        Code?

  @@map("client")
}

model Advertisement {
  id         Int      @id @default(autoincrement())
  imageUrl   String   @map("image_url") @db.VarChar(400)
  imageOrder Int      @default(0) @map("image_order")
  createdAt  DateTime @default(now()) @map("created_at")

  @@map("advertisment")
}

model Code {
  clientId  Int      @id
  text      String?  @db.Char(4)
  createdAt DateTime @default(now()) @map("created_at")
  client    Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@map("code")
}

model Admin {
  id          Int       @id @default(autoincrement())
  user        String    @unique @db.VarChar(100)
  password    String    @db.VarChar(100)
  level       Int       @default(1)
  centerId    Int?
  isDisabled  Boolean   @default(false) @map("is_disabled") @db.TinyInt
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")
  lastLoginAt DateTime? @map("last_login_at")
  role        Role      @default(SALES_MAN)
  center      Center?   @relation(fields: [centerId], references: [id])
  offers      Offer[]
  repairs     Repair[]

  @@map("admin")
}

model Center {
  id        Int       @id @default(autoincrement())
  parentId  Int?      @map("parent_id")
  name      String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  parent    Center?   @relation(name: "center_level", fields: [parentId], references: [id])
  children  Center[]  @relation(name: "center_level")
  admins    Admin[]

  @@map("center")
}

model Category {
  id             Int           @id @default(autoincrement())
  name           String        @unique @db.VarChar(100)
  nameTranslated String        @unique @map("name_translated") @db.VarChar(100)
  image          String?       @db.VarChar(400)
  isDisabled     Boolean       @default(false) @map("is_disabled") @db.TinyInt
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime?     @updatedAt @map("updated_at")
  subCategories  SubCategory[]

  @@map("category")
}

model SubCategory {
  id             Int       @id @default(autoincrement())
  categoryId     Int       @map("category_id")
  name           String    @db.VarChar(100)
  nameTranslated String    @map("name_translated") @db.VarChar(100)
  image          String?   @db.VarChar(400)
  isDisabled     Boolean   @default(false) @map("is_disabled") @db.TinyInt
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime? @updatedAt @map("updated_at")
  category       Category  @relation(fields: [categoryId], references: [id])

  products Product[]

  @@unique([categoryId, name])
  @@unique([categoryId, nameTranslated])
  @@map("sub_category")
}

model Product {
  id                      Int             @id @default(autoincrement())
  subCategoryId           Int             @map("sub_category_id")
  name                    String          @db.VarChar(100)
  nameTranslated          String          @map("name_translated") @db.VarChar(100)
  model                   String?         @db.VarChar(100)
  image                   String?         @db.VarChar(400)
  description             String?         @db.VarChar(1500)
  descriptionTranslated   String?         @map("description_translated") @db.VarChar(1500)
  specification           String?         @db.LongText
  specificationTranslated String?         @map("specification_translated") @db.LongText
  specificationImage      String?         @db.VarChar(400)
  price                   Float?
  catalogFile             String?         @map("catalog_file") @db.VarChar(400)
  isDisabled              Boolean         @default(false) @map("is_disabled") @db.TinyInt
  createdAt               DateTime        @default(now()) @map("created_at")
  updatedAt               DateTime?       @updatedAt @map("updated_at")
  subCategory             SubCategory     @relation(fields: [subCategoryId], references: [id])
  items                   ProductItem[]
  orderProducts           OrderProduct[]
  reviews                 ProductReview[]

  @@unique([name, model])
  @@map("product")
}

model ProductItem {
  sn           String                 @id
  productId    Int                    @map("product_id")
  createdAt    DateTime               @default(now()) @map("created_at")
  isSold       Boolean                @default(false) @map("is_sold") @db.TinyInt
  product      Product                @relation(fields: [productId], references: [id], onDelete: Cascade)
  client       ProductItemsOnClients?
  maintenances Maintenance[]

  @@map("product_item")
}

model ProductItemsOnClients {
  productSn   String      @id
  clientId    Int
  createdAt   DateTime    @default(now()) @map("created_at")
  productItem ProductItem @relation(fields: [productSn], references: [sn], onDelete: Cascade, onUpdate: Cascade)
  client      Client      @relation(fields: [clientId], references: [id])

  @@map("product_items_on_clients")
}

model ProductReview {
  id        Int      @id @default(autoincrement())
  productId Int      @map("product_id")
  clientId  Int      @map("client_id")
  rating    Int
  comment   String?  @db.VarChar(500)
  createdAt DateTime @default(now()) @map("created_at")
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  client    Client   @relation(fields: [clientId], references: [id])

  @@map("product_review")
}

model Order {
  id             Int            @id @default(autoincrement())
  clientId       Int            @map("client_id")
  address        String         @db.VarChar(500)
  note           String?        @db.VarChar(500)
  company        String?        @db.VarChar(100)
  delivery       String?        @db.VarChar(100)
  warranty       String?        @db.VarChar(100)
  terms          String?        @map("terms") @db.VarChar(500)
  status         OrderStatus    @default(PENDING)
  isRead         Boolean        @default(false) @map("is_read") @db.TinyInt
  isDraft        Boolean        @default(false) @map("is_draft") @db.TinyInt
  isOfferRequest Boolean        @default(false) @map("is_offer_request") @db.TinyInt
  createdAt      DateTime       @default(now()) @map("created_at")
  client         Client         @relation(fields: [clientId], references: [id])
  offer          Offer?
  products       OrderProduct[]

  @@map("order")
}

model OrderProduct {
  id        Int     @id @default(autoincrement())
  orderId   Int     @map("order_id")
  productId Int     @map("product_id")
  count     Int     @default(1)
  price     Float?  @map("price")
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])

  @@map("order_product")
}

model Offer {
  id             Int      @id @default(autoincrement())
  adminId        Int      @map("admin_id")
  orderId        Int      @unique @map("order_id")
  price          Float
  validationDays Int?     @map("validation_days")
  createdAt      DateTime @default(now()) @map("created_at")
  order          Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  admin          Admin    @relation(fields: [adminId], references: [id])

  @@map("offer")
}

model Maintenance {
  id           Int               @id @default(autoincrement())
  productSn    String            @map("product_sn")
  description  String?           @db.LongText
  propertyType PropertyType      @default(HOME) @map("property_type")
  address      String?           @db.VarChar(500)
  longitude    Float?
  latitude     Float?
  createdAt    DateTime          @default(now()) @map("created_at")
  bookedAt     DateTime          @map("booked_at")
  status       MaintenanceStatus @default(PENDING)
  isRead       Boolean           @default(false) @map("is_read") @db.TinyInt
  isDraft      Boolean           @default(false) @map("is_draft") @db.TinyInt
  repair       Repair?
  productItem  ProductItem       @relation(fields: [productSn], references: [sn], onDelete: Cascade, onUpdate: Cascade)

  @@map("maintenance")
}

model Repair {
  id            Int         @id @default(autoincrement())
  adminId       Int         @map("admin_id")
  maintenanceId Int         @unique @map("maintenance_id")
  price         Float       @default(0)
  description   String      @db.LongText
  createdAt     DateTime    @default(now()) @map("created_at")
  admin         Admin       @relation(fields: [adminId], references: [id])
  maintenance   Maintenance @relation(fields: [maintenanceId], references: [id], onDelete: Cascade)

  @@map("repair")
}

enum Role {
  ADMIN
  PRODUCT_MANAGER
  SALES_MAN
  TECHNICAL
}

enum OrderStatus {
  PENDING
  REJECTED
  ACCEPTED
  CLOSED
}

enum MaintenanceStatus {
  PENDING
  CANCELED
  FIXED
  NOTFIXED
}

enum PropertyType {
  HOME
  OFFICE
  OTHER
}
